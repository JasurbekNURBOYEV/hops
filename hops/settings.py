"""
Django settings for service project.

Generated by 'django-admin startproject' using Django 3.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path

from core.mebers_gateway import is_chinese_name

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
PRODUCTION_MODE = os.environ.get('PROD', False)
DEBUG = not PRODUCTION_MODE

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'drf_yasg2',
    'rest_framework',
    'core',
    'greed_island',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'hops.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hops.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
    },
}

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Tashkent'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'static'
CONTROL_PAGE_URL = os.environ.get('CONTROL_PAGE_URL')

MEDIA_ROOT = BASE_DIR / 'media'
MEDIA_URL = '/media/'

# HOPS-SPECIFIC CONFIGS
BOT_TOKEN = os.environ.get('BOT_TOKEN')
MAIN_GROUP_ID = int(os.environ.get('MAIN_GROUP_ID'))
TEST_GROUP_ID = int(os.environ.get('TEST_GROUP_ID'))
BOARD_GROUP_ID = int(os.environ.get('BOARD_GROUP_ID'))
TELEGRAPH_TOKEN = os.environ.get('TELEGRAPH_TOKEN')
DEV_ID = int(os.environ.get('DEV_ID'))

# add / remove / edit profibited topics
# NOTE: provide empty list if you want to disable prohibited topics: PROHIBITED_TOPICS = []
PROHIBITED_TOPICS = [
    {
        "name": "botlar",
        "targets": ["bot"],
        "spoilers": [
            ("üÖ±Ô∏è", "b"),
            ("üÖæÔ∏è", "o"),
            ("‚≠ï", "o"),
            ("‚úùÔ∏è", "t"),
            ("ü§ñ", "bot"),
            ("0", "o"),
            ("\n", "")
        ],
        "whitelist": [
            "botan", "botanik", "botqa", "hisobot", "astrobot", "yunusobot", "botiq", "botmon", "robotexnika",
            "botma", "botanika", "botqo", "botgan", "botkan", "botib", "botir", "botak", "botmon", "razrabot",
            "obrabot", "robot", "isbot", "rabot", "umrbot", "botstrap", "boot", "bootcamp", "botcamp", "both",
        ],
        "hint": "Bu mavzuda gaplashish uchun quyidagi guruhlarga kirishingiz mumkin: @botlarhaqida, @telebot_uz, "
                "@python_uz_offtopic"
    }
]

DOMAIN_URL = os.environ.get('DOMAIN_URL')
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'greed_island.utils.pagination.CustomPagination',
    'PAGE_SIZE': 50
}

CORS_ALLOW_ALL_ORIGINS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

CORS_ORIGIN_WHITELIST = [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
]

NEW_MEMBERS_TO_KICK_PATTERNS = [
    is_chinese_name
]

ALLOWED_BOT_IDS = {int(botid) for botid in os.environ.get("ALLOWED_BOT_IDS").split(",")}
